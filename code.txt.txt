#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import Int16
import pigpio

class VisionbotDriver(Node):
    def __init__(self):
        super().__init__('Visionbot_driver')
        self.line_error_subscriber = self.create_subscription(Int16, '/line_following_error', self.update_motor_speed, 10)
        self.motor_controller = MotorSetup(24, 23, 25, 20, 16, 21)
        self.standard_speed = 26  # Base speed for the wheels
        self.velocity_right_wheel = 0
        self.velocity_left_wheel = 0

    def update_motor_speed(self, error_msg):
        if error_msg.data < 0:  # Turn right
            self.velocity_right_wheel = self.standard_speed - 10
            self.velocity_left_wheel = self.standard_speed + 10
        else:  # Turn left
            self.velocity_right_wheel = self.standard_speed + 10
            self.velocity_left_wheel = self.standard_speed - 10

        self.motor_controller.set_speeds(self.velocity_left_wheel, self.velocity_right_wheel)

class MotorSetup:
    def __init__(self, pin_right_a, pin_right_b, pin_right_enable, pin_left_a, pin_left_b, pin_left_enable):
        self.pi = pigpio.pi()
        self.pin_right_enable = pin_right_enable
        self.pin_left_enable = pin_left_enable

        self.pi.set_mode(pin_right_enable, pigpio.OUTPUT)
        self.pi.set_mode(pin_left_enable, pigpio.OUTPUT)

        self.pi.set_PWM_frequency(pin_right_enable, 1000)
        self.pi.set_PWM_frequency(pin_left_enable, 1000)

    def set_speeds(self, left_wheel_speed, right_wheel_speed):
        self.pi.set_PWM_dutycycle(self.pin_right_enable, right_wheel_speed)
        self.pi.set_PWM_dutycycle(self.pin_left_enable, left_wheel_speed)

    def stop_motors(self):
        self.pi.set_PWM_dutycycle(self.pin_right_enable, 0)
        self.pi.set_PWM_dutycycle(self.pin_left_enable, 0)

    def cleanup(self):
        self.pi.stop()

def main(args=None):
    rclpy.init(args=args)
    robot_controller = VisionbotDriver()
    rclpy.spin(robot_controller)
    robot_controller.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()



import pigpio
from time import sleep

in1 = 24
in2 = 23
en = 25
temp1 = 1

# Initialize pigpio
pi = pigpio.pi()

# Set GPIO modes
pi.set_mode(in1, pigpio.OUTPUT)
pi.set_mode(in2, pigpio.OUTPUT)
pi.set_mode(en, pigpio.OUTPUT)

# Set initial output values
pi.write(in1, 0)
pi.write(in2, 0)

# Initialize PWM on the enable pin
pi.set_PWM_frequency(en, 1000)
pi.set_PWM_dutycycle(en, 64)  # 25% duty cycle (0-255 scale)

print("\n")
print("The default speed & direction of motor is LOW & Forward.....")
print("r-run s-stop f-forward b-backward l-low m-medium h-high e-exit")
print("\n")

while True:
    x = input()  # Use input() for Python 3

    if x == 'r':
        print("run")
        if temp1 == 1:
            pi.write(in1, 1)
            pi.write(in2, 0)
            print("forward")
        else:
            pi.write(in1, 0)
            pi.write(in2, 1)
            print("backward")

    elif x == 's':
        print("stop")
        pi.write(in1, 0)
        pi.write(in2, 0)

    elif x == 'f':
        print("forward")
        pi.write(in1, 1)
        pi.write(in2, 0)
        temp1 = 1

    elif x == 'b':
        print("backward")
        pi.write(in1, 0)
        pi.write(in2, 1)
        temp1 = 0

    elif x == 'l':
        print("low")
        pi.set_PWM_dutycycle(en, 64)  # 25% duty cycle (0-255 scale)

    elif x == 'm':
        print("medium")
        pi.set_PWM_dutycycle(en, 128)  # 50% duty cycle (0-255 scale)

    elif x == 'h':
        print("high")
        pi.set_PWM_dutycycle(en, 192)  # 75% duty cycle (0-255 scale)

    elif x == 'e':
        pi.write(in1, 0)
        pi.write(in2, 0)
        pi.stop()
        break

    else:
        print("<<<  wrong data  >>>")
        print("please enter the defined data to continue.....")


sudo pigpiod


import pigpio
from time import sleep

# Motor 1 GPIO pins
in1 = 24
in2 = 23
en1 = 25

# Motor 2 GPIO pins
in3 = 17
in4 = 27
en2 = 22

# Initialize pigpio
pi = pigpio.pi()

# Set GPIO modes for Motor 1
pi.set_mode(in1, pigpio.OUTPUT)
pi.set_mode(in2, pigpio.OUTPUT)
pi.set_mode(en1, pigpio.OUTPUT)

# Set GPIO modes for Motor 2
pi.set_mode(in3, pigpio.OUTPUT)
pi.set_mode(in4, pigpio.OUTPUT)
pi.set_mode(en2, pigpio.OUTPUT)

# Set initial output values
pi.write(in1, 0)
pi.write(in2, 0)
pi.write(in3, 0)
pi.write(in4, 0)

# Initialize PWM on the enable pins
pi.set_PWM_frequency(en1, 1000)
pi.set_PWM_frequency(en2, 1000)
pi.set_PWM_dutycycle(en1, 64)  # 25% duty cycle (0-255 scale)
pi.set_PWM_dutycycle(en2, 64)  # 25% duty cycle (0-255 scale)

print("\n")
print("The default speed & direction of motors is LOW & Forward.....")
print("r-run s-stop f-forward b-backward l-low m-medium h-high e-exit")
print("\n")

temp1 = 1
temp2 = 1

while True:
    x = input()  # Use input() for Python 3

    if x == 'r':
        print("run")
        if temp1 == 1:
            pi.write(in1, 1)
            pi.write(in2, 0)
            print("Motor 1 forward")
        else:
            pi.write(in1, 0)
            pi.write(in2, 1)
            print("Motor 1 backward")

        if temp2 == 1:
            pi.write(in3, 1)
            pi.write(in4, 0)
            print("Motor 2 forward")
        else:
            pi.write(in3, 0)
            pi.write(in4, 1)
            print("Motor 2 backward")

    elif x == 's':
        print("stop")
        pi.write(in1, 0)
        pi.write(in2, 0)
        pi.write(in3, 0)
        pi.write(in4, 0)

    elif x == 'f':
        print("forward")
        pi.write(in1, 1)
        pi.write(in2, 0)
        pi.write(in3, 1)
        pi.write(in4, 0)
        temp1 = 1
        temp2 = 1

    elif x == 'b':
        print("backward")
        pi.write(in1, 0)
        pi.write(in2, 1)
        pi.write(in3, 0)
        pi.write(in4, 1)
        temp1 = 0
        temp2 = 0

    elif x == 'l':
        print("low")
        pi.set_PWM_dutycycle(en1, 64)  # 25% duty cycle (0-255 scale)
        pi.set_PWM_dutycycle(en2, 64)  # 25% duty cycle (0-255 scale)

    elif x == 'm':
        print("medium")
        pi.set_PWM_dutycycle(en1, 128)  # 50% duty cycle (0-255 scale)
        pi.set_PWM_dutycycle(en2, 128)  # 50% duty cycle (0-255 scale)

    elif x == 'h':
        print("high")
        pi.set_PWM_dutycycle(en1, 192)  # 75% duty cycle (0-255 scale)
        pi.set_PWM_dutycycle(en2, 192)  # 75% duty cycle (0-255 scale)

    elif x == 'e':
        pi.write(in1, 0)
        pi.write(in2, 0)
        pi.write(in3, 0)
        pi.write(in4, 0)
        pi.stop()
        break

    else:
        print("<<<  wrong data  >>>")
        print("please enter the defined data to continue.....")
